import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Stream;
import models.Role;
import models.Transaction;
import models.TypeOfOperation;
import models.User;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import reposiroty.DataRepository;
import reposiroty.UserRepository;
import service.AdminService;
import service.UserService;
public class TestUserService {

  UserRepository userRepository = new UserRepository();
  DataRepository dataRepository = new DataRepository();
  AdminService adminService = new AdminService(userRepository, dataRepository);
  UserService userService = new UserService(userRepository, dataRepository);


  @Test
  @BeforeEach
  void setUp() {
    userService.logout();
    userService.login("user3@mail.ru", "User123$");
  }

  // UserRegistration  - уйдет в exception

  //UserLogin()
  /*
  плохие
  Вводим несуществующий email и сущ пароль, несуществующий пароль и сущ емайл и полностью не существующий емейл и пароль - получаем опшинал пустой
  Хорошие: вводим юзера 1 - получаем Оптинал не пустой
   */


  //logout

  /*
   плохие - выходим из учетки не вошедшой - получаем оптионал пустой
   хорошие - выходим из учетки и проверяем isActiveUser  До и после. Проверим так же по пользователю который вышел
   */


  //checkTheBalance ()

  /*
  Плохой - нет юзера - пустая мапа
  Хорошие: есть юзер без операций - пустая мапа.
  Берется юзер, делаются операции, проверяется баланс по полям мапы.
  //checkTheBalance (int id ) - проверяется, что мапа будет либо пустая, либо ее размер равен 1

   */


  //deposit()

  /*
  Плохие . 1 нет юзера - пустая мапа.
           2 Вносим отрицательную или нулевую сумму - получаем пустую мапу.Проверяем баланс

  Хорошие: Полполнить существубщий счет. Проверить, что сумма на этом счету увеличилась.Проверяем баланс

  Пополнить несуществующий счет - проверить, что создался новый счет в рублях с указанной суммой.Проверяем баланс

   */


  //withdraw()

  /*
  Плохие . 1 нет юзера - пустая мапа. Проверяем баланс
           2 Снимаем отрицательную или нулевую сумму - получаем пустую мапу.Проверяем баланс
           3. Снимаем со счета большую сумму, которую нельзя снять - получаем пустую мапу. Проверяем баланс
           4. Снимаем с несуществующего счета сумму - получаем пустую мапу

  Хорошие: Снимаем какую-то сумму. Проверить, что сумма на этом счету уменьшилась. Проверяем баланс

  Пополнить несуществующий счет - проверить, что создался новый счет в рублях с указанной суммой

   */

  //transfer()

  /*
    Плохие
    1. Переводим отриц сумму с нормальных счетов - получаем пустую мапу. Проверяем что баланс не изменился.
    2. Переводим сумму с несущ счета - получаем пустую мапу. Проверяем что баланс не изменился.
    3. Переводим сумму на несущ счет - получаем пустую мапу. Проверяем что баланс не изменился.

    Хороший
    Переводим с сущ счет на сущ счет в одной валюте. Проверяем балансы на обоих счетах.
    Переводим с сущ счет на сущ счет в разных валютах. Проверяем балансы на обоих счетах.
   */


  //openNewAccount()
  /*
  Плохие - открываем счет в несуществующей валюте - получаем пустой счет. Количество счетов не должно измениться.
  Открываем счет со стартовым капиталом меньше 0  - получаем пустую счет. Количество счетов не должно измениться.

  Хорошая - открыть счет в евро-долларах-рублях и проверить что они появились в счетах клиента. проверить суммы и валюты.
   */

  //closeNewAccount()
  /*
  Плохие - закрываем счет с несущтсв id  - получаем пустой счет. Количество счетов не должно измениться.
  закрываем счет с балансом > 1  - получаем пустой счет. Количество счетов не должно измениться.

  хорошие: закрываем счет с балансом 0 в долларах. Проверяем, что количество счетов изменилось и теперь данного счета нет у клиента.
   */

  //showTheHistory()

  /*
  Плохие: некорректный тип операции ( не 1 и не 2) - пустой list
  некорретный вид валюты - пустой лист

  Хороший :сделать несколько операций у пользователя с долларом.( тип 1 - валюта доллар) - список операций пользователя по доллару
  Хороший :сделать несколько операций у пользователя с разными валютами.( тип 2) - список операций пользователя по всем операциям

   */

  //showAllaccountsOfUSer()

  //плохой  - нет счетов - результат false. Проверка - взять юзера и getAccounts() - должны быть тоже пустой
  //Хороший - открыть несколько счетов в разных валютах. Результат true.  взять юзера и getAccounts() - должны быть c этими счетами

  //getMapOFAccount
  // - счетов нет  - мапа пустая
  // добавить счет - размер мапы = 1


  //getCurrencyAndRate
  //Получить ее - размер 3, в ней 3 валюты USD,RUB,EUR с заданными курсами.
  //добавить валюту - и в новой мапе размер 4 с заданными курсом.
  //удалить добавленную валюту - будет размер 3, с остальными валютами ничего не произойдет.

  //getCurrency
  // Получить Set и проверить что все 3 валюты там есть.


  //getUsers

  /*
  получить список юзеров, проверить что есть все 3 юзера.
  Добавить сюда нового пользователя.
  Проверить, что пользователь добавле - пробежаться по всем его полям в новой мапе юзеров.
   */

  //isAdministrator

  // Берется юзер1 и его роль.  - false
  // задается юзеру 2  кассир и берется его роль - false
  //у юзера 3 берется роль - true

  //isActiveUser
  // вызываем этот метод - дает true
  //выходим - дает false.


}
